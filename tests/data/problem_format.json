{
    "name": {
        "type": "string",
        "required": false,
        "nullable": true,
        "default": null,
        "minlength": 0,
        "maxlength": 128,
        "regex": "[ -~]{0,128}",
        "meta": {
            "description": "User defined name for the problem. Not used by Erasmus."
        }
    },
    "description": {
        "type": "string",
        "required": false,
        "nullable": true,
        "default": null,
        "minlength": 0,
        "maxlength": 1024,
        "regex": "[ -~]{0,1024}",
        "meta": {
            "description": "User defined arbitary string. Not used by Erasmus."
        }
    },
    "git_repo": {
        "type": "string",
        "regex": "[a-zA-Z0-9_\\.-]{1,256}",
        "minlength": 1,
        "meta": {
            "description": "The Git base URL *NOT* including the repo name. URL/git_repo.git must be a valid git repo url."
        },
        "maxlength": 256,
        "required": true
    },
    "git_url": {
        "type": "string",
        "regex": "^((http|https)://)[-a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
        "minlength": 8,
        "meta": {
            "description": "The Git base URL *NOT* including the repo name. 'git_url/git_repo.git' must be a valid git repo URL."
        },
        "maxlength": 2048,
        "required": true
    },
    "git_hash": {
        "type": "string",
        "maxlength": 64,
        "meta": {
            "description": "Lower case hex SHA256 or SHA1 (in the LSB's) of the git commit to pull."
        },
        "minlength": 40,
        "regex": "([0-9a-f]{40}|[0-9a-f]{64})",
        "required": true
    },
    "last_verified_live": {
        "type": "string",
        "minlength": 27,
        "maxlength": 27,
        "regex": "20[2-9][0-9]-(1[0-2]|0[1-9])-([0-2][0-9]|3[01])T[0-2][0-9](:[0-5][0-9]){2}\\.[0-9]{6}Z",
        "meta": {
            "description": "The date and time the git url, repo & hash were last verified to be live."
        }
    },
    "root_path": {
        "type": "string",
        "required": true,
        "nullable": false,
        "default": ".",
        "minlength": 1,
        "maxlength": 1024,
        "regex": "[ -~]{0,1024}",
        "meta": {
            "description": "The root folder of the problem definition relative to the repo root."
        }
    },
    "ff_code_file": {
        "type": "string",
        "required": true,
        "nullable": false,
        "default": "fitness_function.py",
        "minlength": 1,
        "maxlength": 1024,
        "regex": "[ -~]{0,1024}",
        "meta": {
            "description": "The python file defining the fitness function and preload function including the path from the root and .py extension."
        }
    },
    "requirements_file_name": {
        "type": "string",
        "required": true,
        "nullable": true,
        "default": null,
        "minlength": 1,
        "maxlength": 1024,
        "regex": "[ -~]{0,1024}",
        "meta": {
            "description": "The name of the pip compatible requirements file including the path from the root of the repo and .txt extension."
        }
    },
    "ordered_interface_hash": {
        "required": true,
        "type": "integer",
        "min": -9223372036854775808,
        "max": 9223372036854775807,
        "meta": {
            "description": "The ordered interface hash of the GC expected by the fitness function."
        }
    },
    "unordered_interface_hash": {
        "required": true,
        "type": "integer",
        "min": -9223372036854775808,
        "max": 9223372036854775807,
        "meta": {
            "description": "The unordered interface hash of the GC expected by the fitness function."
        }
    }
}